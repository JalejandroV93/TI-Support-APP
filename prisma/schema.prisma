// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Modelo de Usuarios
model Usuario {
  id                  Int      @id @default(autoincrement())
  username            String   @unique
  password            String
  nombre              String
  email               String   @unique
  phonenumber         String? // Número de teléfono opcional
  rol                 Rol
  isBlocked           Boolean  @default(false) // Indica bloqueo por intentos fallidos
  isDisabled          Boolean  @default(false) // Deshabilita el acceso
  failedLoginAttempts Int      @default(0) // Contabiliza los intentos fallidos
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relaciones con los reportes
  soporteReports       SoporteReport[]
  mantenimientoReports MantenimientoReport[]
  redReports           RedReport[]
  aulaMovilReports     AulaMovilReport[]

}

enum Rol {
  ADMIN
  COLABORADOR
}

// 2. Modelo de Categorías de Soporte (flexible para futuros incrementos)
model SoporteCategoria {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique
  descripcion String? // Descripción opcional para dar mayor contexto

  soporteReports SoporteReport[]
}

// 3. Reporte de Soportes (referenciando la tabla de categorías)
model SoporteReport {
  id          Int      @id @default(autoincrement())
  userId      Int
  categoriaId Int // Clave foránea a SoporteCategoria
  fecha       DateTime @default(now())
  descripcion String // Descripción del soporte prestado

  usuario   Usuario          @relation(fields: [userId], references: [id])
  categoria SoporteCategoria @relation(fields: [categoriaId], references: [id])
}

// 4. Reporte de Mantenimiento (con mayor detalle del proceso)
model MantenimientoReport {
  id                Int               @id @default(autoincrement())
  numeroReporte     String            @unique @default("RM-") // Ej: RM-0001 (manejar en backend)
  userId            Int
  fechaRecibido     DateTime
  fechaEntrega      DateTime?
  fechaRegistro     DateTime          @default(now())
  tipoEquipo        String?
  equipo            String
  marca             String?
  modelo            String?
  sistemaOp         String?           @map("sistema_operativo")
  procesador        String?
  ram               String?           @map("memoria_ram")
  ramCantidad       Int?              @map("cantidad_ram")
  tipoMantenimiento TipoMantenimiento
  diagnostico       String?
  solucion          String?
  observaciones     String?
  tecnico           String // Nombre del técnico que realizó el mantenimiento
  detallesProceso   String?

  usuario Usuario @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([fechaRecibido])
  @@index([tecnico])
}

enum TipoMantenimiento {
  PREVENTIVO
  CORRECTIVO
  OTRO
}

// 5. Reporte de Red (más abierto para registrar daño, cambio, reparación, etc.)
model RedReport {
   id              Int       @id @default(autoincrement())
  numeroReporte   String    @unique @default("RR-")
  userId          Int
  fechaRegistro   DateTime  @default(now()) // Fecha de registro del reporte
  fechaIncidente  DateTime  // Fecha del incidente (puede ser anterior)
  ubicacion       String?   // Ej: Laboratorio 1, Oficina de Rectora, etc.
  tipo            RedTipo   // Tipo de reporte (daño, cambio, reparación, u otro)
  descripcion     String?   // Detalle breve de la incidencia (sin sobrecargar al colaborador)
  dispositivo     String?   // Ej: Router, Switch, Punto de Acceso, Cableado
  direccionIP     String?   // Si aplica (para dispositivos con IP)
  // direccionMAC    String?   // Si aplica (para dispositivos con MAC)  <- REMOVE THIS
  estado          RedEstado // NUEVO: Abierto, En Proceso, Resuelto, Cerrado
  prioridad       Prioridad // NUEVO: Baja, Media, Alta, Urgente
  tecnico         String?   // Nombre del técnico asignado (opcional)
  notasTecnicas   String?   // Notas del técnico (para detalles técnicos)
  solucion        String?    // Detalles sobre la solución aplicada.
  usuario         Usuario   @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([fechaIncidente])
    @@index([tecnico])
    @@index([estado])
}

enum RedTipo {
  DANIO       // Reporte de daño
  CAMBIO      // Reporte de cambio de equipo/dispositivo
  REPARACION  // Reporte de reparación
  MANTENIMIENTO // Mantenimiento programado
  OTRO        // Otro tipo de incidencia
}

enum RedEstado {
    ABIERTO
    EN_PROCESO
    RESUELTO
    CERRADO
}

enum Prioridad {
  BAJA
  MEDIA
  ALTA
  URGENTE
}
// 6. Reporte de Aulas Móviles
model AulaMovilReport {
  id              Int      @id @default(autoincrement())
  numeroReporte   String   @unique @default("AM-")
  userId          Int
  fechaRegistro   DateTime @default(now())
  fechaIncidente  DateTime  // Fecha del incidente (puede ser anterior)
  tabletId        String?  // Identificador opcional de la tablet
  novedades       String   // Descripción de la novedad o incidencia (obligatoria)
  tipoNovedad     TipoNovedad // NUEVO: Tipo de novedad (instalación, daño, etc.)
  estudiante      String?  // Nombre del estudiante (si aplica)
  gradoEstudiante String?  // Grado del estudiante (si aplica)
  observaciones   String?  // Observaciones adicionales (opcional)

  usuario Usuario @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([fechaIncidente])
  @@index([tipoNovedad])
}

// NUEVO: Enum para tipo de novedad
enum TipoNovedad {
  INSTALACION_APP
  DANIO_FISICO
  FALLA_SOFTWARE
  PERDIDA
  OTRO
}
